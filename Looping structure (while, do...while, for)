
🔁 for Loop
📌 Purpose: Best for situations where you know exactly how many times the loop should run.

for (initialization; condition; increment) {
    // code block
}


✅ How It Works:
- Initialization: Runs once at the beginning (e.g., int i = 1).
- Condition: Checked before each iteration (e.g., i <= 10). If false, loop stops.
- Increment: Updates the variable after each iteration (e.g., i++).
🧠 Example Use: Counting from 1 to 10, printing a known number of values, etc.

🔄 while Loop
📌 Purpose: Ideal when the number of iterations depends on a changing condition.

while (condition) {
    // code block
}


✅ How It Works:
- Condition: Checked before each iteration.
- If the condition is true, the loop runs.
- If false at the start, the loop never runs.
- You manually update the loop variable inside the loop (e.g., i++).
🧠 Example Use: Waiting for a user input, sensor value reaching a threshold, etc.

🔂 do-while Loop
📌 Purpose: Useful when you want the loop to run at least once, no matter what the condition is.

do {
    // code block
} while (condition);


✅ How It Works:
- Loop runs the code block first (no condition check yet).
- Then it checks the condition.
- If condition is true, it repeats; otherwise, it stops.
🧠 Example Use: Menu-driven programs, taking input once before deciding to continue.



1.  Print 1 to 10.(For....loop)

#include <stdio.h>

int main() {
    for (int i = 1; i <= 10; i++) {
        printf("%d\n", i);
    }
    return 0;
}

Short discription:- 
- Initializes i to 1.
- Checks i <= 10 before each iteration.
- Increments i after each print.


2. Print 1 to 10.(while..loop)

#include <stdio.h>

int main() {
    int i = 1;
    while (i <= 10) {
        printf("%d\n", i);
        i++;
    }
    return 0;
}


Short discription:-
- Checks the condition before running the loop.
- Continues until i becomes greater than 10.


3.  Print 1 to 10.( do while..loop)

#include <stdio.h>

int main() {
    int i = 1;
    do {
        printf("%d\n", i);
        i++;
    } while (i <= 10);
    return 0;
}


Short discription:-
- Executes the loop body first.
- Then checks the condition.
- Guarantees at least one run.

4. Print 2.4.6.8.10.

 #include <stdio.h>

int main() {
    for (int i = 2; i <= 10; i += 2) {
        printf("%d\n", i);
    }
    return 0;
}


📌 Description:
The for loop runs a block of code a fixed number of times. 
Here, it starts at 2 and adds 2 each time until reaching 10.

5. Print 1.3.5.7.9.

#include <stdio.h>

int main() {
    for (int i = 1; i <= 9; i += 2) {
        printf("%d\n", i);
    }
    return 0;
}

📌 Description:
We start at 1 and increase i by 2 in each loop,
so it hits all the odd numbers up to 9.


6. Print 1.2.4,8,16.32.64.

#include <stdio.h>

int main() {
    for (int i = 1; i <= 64; i *= 2) {
        printf("%d\n", i);
    }
    return 0;
}


📌 Description:
- Starts with i = 1.
- In each iteration, multiplies i by 2.
- Stops when i becomes greater than 64.

7. Print 10 to 1

#include <stdio.h>

int main() {
    for (int i = 10; i >= 1; i--) {
        printf("%d\n", i);
    }
    return 0;
}

Starts at 10, decreases by 1 each time using i--,
and stops when it reaches 1. Great for countdowns or looping backward through values!


8. 
